<project name="test-expert" default="build" basedir=".">
	<description>
       Build file for Carpago Software's TestExpert product (c) 2012
    </description>
	<!-- set global properties for this build -->
	<property name="src.dir" location="src/main/java" />
	<property name="resources.dir" location="src/main/resources" />
	<property name="test.dir" location="src/test/java" />
	<property name="generated.dir" location="src/test/generated-test" />
	<property name="build.dir" location="../build" />
	<property name="dist.dir" location="../dist" />
	<property name="test.report.dir" location="../reports" />
	<property name="thirdparty.dir" location="../3rdparty" />

	<!-- Emma stuff -->
	<property name="coverage.dir" value="..\coverage" />
	<property name="emma.dir" value="${thirdparty.dir}/emma" />
	<property name="instrumented.dir" value="..\inst" />
	
	<path id="emma.lib">
		<fileset dir="${emma.dir}">
			<include name="*.jar" />
		</fileset>
	</path>
	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

	<emma enabled="true">
		<instr instrpath="${build.dir}" destdir="${instrumented.dir}" metadatafile="${coverage.dir}/metadata.emma" merge="true">
			<filter excludes="au.com.jenisys.view.*" />
		</instr>
	</emma>

	<emma enabled="true">
		<report sourcepath="${src.dir}">
			<fileset dir="${coverage.dir}">
				<include name="*.emma" />
			</fileset>

			<xml outfile="${coverage.dir}/coverage.xml" depth="method" />
		</report>
	</emma>

	<path id="compile.classpath">
		<fileset dir="${thirdparty.dir}/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="test.classpath">
		<fileset dir="${thirdparty.dir}/lib">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${build.dir}" />
	</path>

	<target name="clean" description="clean up">
		<!-- Delete some direcotry trees -->
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${test.report.dir}" />
		<delete dir="${generated.dir}" />
	</target>

	<target name="init" depends="clean">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build.dir}" />
		<mkdir dir="${test.report.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${generated.dir}" />
		<mkdir dir="${coverage.dir}" />
		<mkdir dir="${instrumented.dir}" />
	</target>

	<target name="compile" depends="init" description="compile the source ">
		<javac includeantruntime="false" srcdir="${src.dir}" destdir="${build.dir}" debug="true" debuglevel="lines,vars,source">
			<classpath refid="compile.classpath" />
		</javac>

		<copy todir="${build.dir}">
			<fileset dir="${resources.dir}" includes="**/*.xml,**/*.properties,**/*.txt,**/*.ico" />
		</copy>
	</target>

	<target name="compile.test" depends="compile" description="compile the source ">
		<javac includeantruntime="false" srcdir="${test.dir}" destdir="${build.dir}" debug="true" debuglevel="lines,vars,source">
			<classpath refid="test.classpath" />
		</javac>
	</target>

	<!-- Run the JUnit Tests -->
	<!-- Output is xml or plain -->
	<target name="test" depends="compile.test">
		<junit fork="true" printsummary="yes" showoutput="true" haltonerror="false" haltonfailure="false">
			<classpath refid="test.classpath" />
			<formatter type="xml" />
			<formatter type="plain" />
			<batchtest todir="${test.report.dir}">
				<fileset dir="${test.dir}">
					<include name="**/*TestExpertTest*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="generate.all" depends="compile.test">
		<junit fork="true" printsummary="yes" showoutput="true" haltonerror="false" haltonfailure="false">
			<classpath refid="test.classpath" />
			<formatter type="xml" />
			<batchtest todir="${test.report.dir}">
				<fileset dir="${test.dir}">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="compile.generated" description="compile the source ">
		<!-- Compile the java code from ${src} into ${build.dir} -->
		<javac includeantruntime="false" srcdir="${generated.dir}" destdir="${build.dir}" debug="true" debuglevel="lines,vars,source">
			<classpath refid="test.classpath" />
		</javac>
	</target>



	<target name="test.generated" depends="compile.generated">
		<junit fork="true" printsummary="yes" showoutput="true" haltonerror="false" haltonfailure="false">
			<classpath refid="test.classpath" />
			<formatter type="plain" />
			<batchtest todir="${test.report.dir}">
				<fileset dir="${generated.dir}">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="doall" depends="clean, init, compile, compile.test, generate.all, compile.generated, test.generated" />

	<target name="build" depends="compile" description="generate the distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist.dir}/lib" />

		<!-- Put everything in ${build.dir} into the ${ant.project.name}-${DSTAMP}.jar file -->
		<jar jarfile="${dist.dir}/lib/${ant.project.name}-${DSTAMP}.jar" basedir="${build.dir}" />

		<!-- Put the dependencies at same location -->
		<copy todir="${dist.dir}/lib">
			<fileset dir="${thirdparty.dir}\lib" includes="**/*.jar" />
		</copy>
	</target>

	<target name="zip" depends="build" description="generate a zipfile for deployment">
		<zip destfile="${dist.dir}/zip/${ant.project.name}-${DSTAMP}.zip">
			<zipfileset dir="${dist.dir}/lib">
				<include name="*.jar" />
			</zipfileset>
		</zip>
	</target>
</project>
